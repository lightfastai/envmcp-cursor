# Performance Optimizations Applied:
# 1. Enhanced caching strategy with cache reuse between jobs
# 2. Comprehensive nox session usage for all tools
# 3. Cross-platform tests only on critical versions
# 4. Conditional coverage reporting (only on main branch pushes)
# 5. Reduced timeouts and parallel execution
# 6. Bytecode caching for faster Python imports
# 7. Platform-specific cache keys for better hit rates
# 8. Parallel execution with robust error handling
# 9. Path-based filtering to skip unnecessary runs
# 10. Standardized tool execution with noxfile.py

name: CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
    paths-ignore:
      - 'docs/**'
      - '*.md'
      - 'README.md'
      - 'CONTRIBUTING.md'
      - 'LICENSE'
      - '.gitignore'
  pull_request:
    branches: [ "main" ]
    paths-ignore:
      - 'docs/**'
      - '*.md'
      - 'README.md'
      - 'CONTRIBUTING.md'
      - 'LICENSE'
      - '.gitignore'
  workflow_dispatch:

permissions:
  contents: read

env:
  PYTHON_VERSION: "3.13"

jobs:
  # Fast feedback loop - runs first for quick validation
  fast-checks:
    name: Fast Checks (Lint & Type)
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-info.outputs.cache-key }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Generate cache info
      id: cache-info
      run: |
        echo "cache-key=uv-${{ runner.os }}-${{ hashFiles('pyproject.toml', 'noxfile.py') }}" >> $GITHUB_OUTPUT

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"

    - name: Set up Python with actions/setup-python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install uv Python
      run: uv python install ${{ env.PYTHON_VERSION }}

    # Enhanced UV cache with better key strategy
    - name: Cache UV dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/uv
          .venv
        key: ${{ steps.cache-info.outputs.cache-key }}
        restore-keys: |
          uv-${{ runner.os }}-

    # More specific nox cache with session-level caching
    - name: Cache nox environments
      uses: actions/cache@v4
      with:
        path: .nox
        key: nox-${{ runner.os }}-fast-${{ hashFiles('pyproject.toml', 'noxfile.py') }}
        restore-keys: |
          nox-${{ runner.os }}-fast-
          nox-${{ runner.os }}-

    # Cache Python bytecode to speed up subsequent runs
    - name: Cache Python bytecode
      uses: actions/cache@v4
      with:
        path: |
          envmcp/**/__pycache__
          tests/**/__pycache__
        key: pycache-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('envmcp/**/*.py', 'tests/**/*.py') }}

    - name: Install nox
      run: uv tool install nox --with nox-uv

    - name: Run analysis in parallel
      run: |
        # Run lint, type check, and security in parallel for faster feedback
        nox -s lint &
        LINT_PID=$!
        nox -s type_check &
        TYPE_PID=$!
        nox -s security &
        SECURITY_PID=$!
        
        # Wait for all processes and capture exit codes
        wait $LINT_PID
        LINT_EXIT=$?
        wait $TYPE_PID
        TYPE_EXIT=$?
        wait $SECURITY_PID
        SECURITY_EXIT=$?
        
        # Report results
        echo "Lint exit code: $LINT_EXIT"
        echo "Type check exit code: $TYPE_EXIT"
        echo "Security exit code: $SECURITY_EXIT"
        
        # Fail if lint or type check fails (security warnings acceptable)
        if [ $LINT_EXIT -ne 0 ] || [ $TYPE_EXIT -ne 0 ]; then
          echo "Static analysis failed"
          exit 1
        fi
        
        echo "Fast checks completed successfully"

  # Comprehensive testing across Python versions (optimized)
  comprehensive-tests:
    name: Test Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    needs: [fast-checks]
    strategy:
      fail-fast: false
      matrix:
        # Reduced to key versions for performance
        python-version: ["3.8", "3.11", "3.13"]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install uv Python ${{ matrix.python-version }}
      run: uv python install ${{ matrix.python-version }}

    # Reuse cache from fast-checks job
    - name: Cache UV dependencies (reuse)
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/uv
          .venv
        key: ${{ needs.fast-checks.outputs.cache-key }}
        restore-keys: |
          uv-${{ runner.os }}-

    # Version-specific nox cache
    - name: Cache nox environments
      uses: actions/cache@v4
      with:
        path: .nox
        key: nox-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('pyproject.toml', 'noxfile.py') }}
        restore-keys: |
          nox-${{ runner.os }}-${{ matrix.python-version }}-
          nox-${{ runner.os }}-

    - name: Install nox
      run: uv tool install nox --with nox-uv

    - name: Run tests with parallel execution
      run: |
        # Use parallel execution for faster test runs
        nox --session "tests" --python "${{ matrix.python-version }}" -- --numprocesses=auto --maxfail=3

    - name: Test CLI functionality
      run: nox -s cli_test

  # Integration and coverage testing
  integration-tests:
    name: Integration & Coverage
    runs-on: ubuntu-latest
    needs: [fast-checks]
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install uv Python
      run: uv python install ${{ env.PYTHON_VERSION }}

    # Reuse dependencies cache
    - name: Cache UV dependencies (reuse)
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/uv
          .venv
        key: ${{ needs.fast-checks.outputs.cache-key }}
        restore-keys: |
          uv-${{ runner.os }}-

    - name: Cache nox environments
      uses: actions/cache@v4
      with:
        path: .nox
        key: nox-${{ runner.os }}-integration-${{ hashFiles('pyproject.toml', 'noxfile.py') }}
        restore-keys: |
          nox-${{ runner.os }}-integration-
          nox-${{ runner.os }}-

    - name: Install nox
      run: uv tool install nox --with nox-uv

    - name: Run integration tests
      run: |
        # Run CLI tests with optimizations
        nox -s cli_test

    - name: Coverage report (conditional)
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      run: nox -s coverage

    - name: Upload coverage to Codecov
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  # Cross-platform tests (only on main branch pushes for performance)
  cross-platform-tests:
    name: Cross Platform (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    needs: [fast-checks]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    strategy:
      fail-fast: false
      matrix:
        # Only test on macOS and Windows - Linux already covered
        os: [macos-latest, windows-latest]
        
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install uv Python
      run: uv python install ${{ env.PYTHON_VERSION }}

    # Platform-specific cache
    - name: Cache UV dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/uv
          .venv
        key: uv-${{ runner.os }}-cross-platform-${{ hashFiles('pyproject.toml', 'noxfile.py') }}
        restore-keys: |
          uv-${{ runner.os }}-

    - name: Cache nox environments
      uses: actions/cache@v4
      with:
        path: .nox
        key: nox-${{ runner.os }}-cross-platform-${{ hashFiles('pyproject.toml', 'noxfile.py') }}
        restore-keys: |
          nox-${{ runner.os }}-

    - name: Install nox
      run: uv tool install nox --with nox-uv

    - name: Run core tests
      run: |
        # Test minimum and latest Python versions on cross-platform
        nox --session "tests" --python "3.8" -- --numprocesses=auto
        nox --session "tests" --python "3.13" -- --numprocesses=auto

    - name: Test CLI on ${{ matrix.os }}
      run: nox -s cli_test

  # Package building and verification
  build-and-verify:
    name: Build & Verify Package
    runs-on: ubuntu-latest
    needs: [fast-checks]
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install uv Python
      run: uv python install ${{ env.PYTHON_VERSION }}

    # Cache build tools
    - name: Cache build tools
      uses: actions/cache@v4
      with:
        path: ~/.cache/uv
        key: build-tools-${{ runner.os }}-${{ hashFiles('pyproject.toml') }}

    - name: Install nox
      run: uv tool install nox --with nox-uv

    - name: Build package
      run: nox -s build

    - name: Test package installation
      run: |
        # Test package installation from wheel
        uv pip install dist/*.whl --system
        
        # Test CLI script works
        envmcp --help
        python -c "import envmcp; print('Package imported successfully')"
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: python-package-distributions
        path: dist/ 